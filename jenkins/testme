// Configuration options
Map matrix_axes = [
  DEEPOPS_VAGRANT_OS: ['centos', 'ubuntu'],
  DEEPOPS_FULL_INSTALL: [' ', 'multinode'],
  DEEPOPS_DEPLOYMENT_PLATFORM: ['slurm', 'k8s']
]


// Default values
String GPUCOUNT = 1 // Default to 1 GPU resource, use 2 if in 'multinode'
Map tasks = [failFast: false] // Map that will hold all 'tasks' to run, failFast to continue in case of a single failure
List axes = getMatrixAxes(matrix_axes).findAll { axis -> 1 == 1 } // List of combinations


// Template code to convert matrix above into a usable list of configuration combinations
@NonCPS
List getMatrixAxes(Map matrix_axes) {
  List axes = []
  matrix_axes.each { axis, values ->
    List axisList = []
    values.each { value ->
      axisList << [(axis): value]
    }
    axes << axisList
  }
  axes.combinations()*.sum()
}



for(int i = 0; i < axes.size(); i++) {
  // convert the Axis into valid values for withEnv step
  Map axis = axes[i]
  List axisEnv = axis.collect { k, v ->
    "${k}=${v}"
  }
  tasks[axisEnv.join(', ')] = { ->
    node() {
      withEnv(axisEnv) {
        if("$DEEPOPS_FULL_INSTALL" == "multinode") {
          GPUCOUNT=2
        }
        lock(resource: null, label: 'gpu', quantity: "${GPUCOUNT}", variable: 'GPUDATA') {
            stage('Initial Setup') {
                echo "Munge files for testing"
            }
            stage('Deployment') {
                  echo "K8S"
            }
            always {
              sh '''
                pwd
                cd virtual && ./vagrant_shutdown.sh
              '''
            }
          }
        }
      }
    }
  }

stage("Matrix builds") {
    parallel(tasks)
}
