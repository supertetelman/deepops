Map matrix_axes = [
    DEEPOPS_VAGRANT_OS: ['centos', 'ubuntu'],
    DEEPOPS_FULL_INSTALL: [' ', 'multinode'],
    DEEPOPS_DEPLOYMENT_PLATFORM: ['slurm', 'k8s']
]

@NonCPS
List getMatrixAxes(Map matrix_axes) {
    List axes = []
    matrix_axes.each { axis, values ->
        List axisList = []
        values.each { value ->
            axisList << [(axis): value]
        }
        axes << axisList
    }
    // calculate cartesian product
    axes.combinations()*.sum()
}

String GPUCOUNT = 1
Map tasks = [failFast: false]

List axes = getMatrixAxes(matrix_axes).findAll { axis -> 1 == 1 }

for(int i = 0; i < axes.size(); i++) {
    // convert the Axis into valid values for withEnv step
    Map axis = axes[i]
    List axisEnv = axis.collect { k, v ->
        "${k}=${v}"
    }
    tasks[axisEnv.join(', ')] = { ->
        node() {
            withEnv(axisEnv) {
       GPUCOUNT=1
String GPUCOUNT=1
    		if ("$DEEPOPS_FULL_INSTALL" == "multinode") {
      GPUCOUNT=2
    }
                lock(resource: null, label: 'gpu', quantity: "${GPUCOUNT}", variable: 'GPUDATA') {
                  stage("$DEEPOPS_DEPLOYMENT_PLATFORM-$DEEPOPS_VAGRANT_OS-$DEEPOPS_FULL_INSTALL") {
                      sh 'echo Do Build for $DEEPOPS_DEPLOYMENT_PLATFORM-$DEEPOPS_VAGRANT_OS-$DEEPOPS_FULL_INSTALL-$GPUCOUNT'
                  }
                }
            }
        }
    }
}

stage("Matrix builds") {
    parallel(tasks)
}
