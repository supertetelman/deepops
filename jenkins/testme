Map matrix_axes = [

    DEEPOPS_VAGRANT_OS: ['centos', 'ubuntu'],
    DEEPOPS_FULL_INSTALL: ['', 'true'],
    DEEPOPS_DEPLOYMENT_PLATFORM: ['slurm', 'k8s']
]

@NonCPS
List getMatrixAxes(Map matrix_axes) {
    List axes = []
    matrix_axes.each { axis, values ->
        List axisList = []
        values.each { value ->
            axisList << [(axis): value]
        }
        axes << axisList
    }
    // calculate cartesian product
    axes.combinations()*.sum()
}

Map response = [:]
stage("Choose combinations") {
    response = input(
        id: 'Platform',
        message: 'Customize your matrix build.',
        parameters: [
            choice(
                choices: ['all', 'linux', 'mac', 'windows'],
                description: 'Choose a single platform or all platforms to run tests.',
                name: 'PLATFORM'),
            choice(
                choices: ['all', 'chrome', 'edge', 'firefox', 'safari'],
                description: 'Choose a single browser or all browsers to run tests.',
                name: 'BROWSER')
        ])
}

// filter the matrix axes since
// Safari is not available on Linux and
// Edge is only available on Windows
Map tasks = [failFast: false]

List axes = getMatrixAxes(matrix_axes).findAll { axis ->
    1 == 1
}

for(int i = 0; i < axes.size(); i++) {
    // convert the Axis into valid values for withEnv step
    Map axis = axes[i]
    List axisEnv = axis.collect { k, v ->
        "${k}=${v}"
    }
    tasks[axisEnv.join(', ')] = { ->
        node() {
            withEnv(axisEnv) {
                stage("$DEEPOPS_DEPLOYMENT_PLATFORM") {
                    echo nodeLabel
                    sh 'echo Do Build for ${DEEPOPS_VAGRANT_OS}}'
                }
            }
        }
    }
}

stage("Matrix builds") {
    parallel(tasks)
}
